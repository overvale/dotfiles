#!/usr/bin/ruby
# coding: utf-8

# This script converts a custom markup (described in the comments below)
# to HTML. It is intended to extend a plain-text markup language like
# markdown with custom features.

ARGF.set_encoding(Encoding::UTF_8)
input = ARGF.read

span_open  = /(?<!\\){/
span_close = /(?<!\\)}/
div_open   = /(?<!\\){\[/
div_close  = /(?<!\\)\]}/

# {comment foo} => <!-- foo -->
# {! foo} => <!-- foo -->
input = input.gsub(/#{span_open}(comment|!):?[ \t]+(.+?)#{span_close}/, '<!-- \2 -->')

# {break} => <div class="break"></div>
input = input.gsub(/^\s*{break}\s*$/, "\n<div class=\"break\"></div>\n")

# {code foo} => <code>foo</code>
input = input.gsub(/#{span_open}(code):?[ \t]+(.+?)#{span_close}/, '<code>\2</code>')

# {sup foo} => <sup>foo</sup>
input = input.gsub(/#{span_open}(sup):?[ \t]+(.+?)#{span_close}/, '<sup>\2</sup>')

# Lines beginning with ¶
input = input.gsub(/¶ +/, "\n")

# {img /path/to/img.jpg} => <img src="/path/to/img.jpg" />
input = input.gsub(/#{span_open}img:?[ \t]+(.+?)#{span_close}/, '<img src="\1" />')

# {[foo bar]} => <div class="foo">bar</div><!--foo-->
input = input.gsub(/#{div_open}(\w+):?[ \t\n]+/, '<div class="\1">'+"\n")
input = input.gsub(/#{div_close}(\w+)?/, '</div><!--\1-->')

# Spans
# {foo bar} => <span class="foo">bar</span>
input = input.gsub(/#{span_open}(\w+):?[ \t]+/, '<span class="\1">')
input = input.gsub(/#{span_close}/, '</span>')

# Escaped
# \{foo\} => {foo}
input = input.gsub(/\\([{}])/, '\1')

# Finally, print it all
print input
